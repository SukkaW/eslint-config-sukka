import { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED__ } from '@eslint-sukka/js';
import ts_eslint_plugin from '@typescript-eslint/eslint-plugin';
import fs from 'fs';
import path from 'path';

(() => {
  const ts_eslint_plugin_config_all = ts_eslint_plugin.configs.all.rules;

  const needOverriddenRules = new Set(
    Object.entries(ts_eslint_plugin_config_all || {})
      .filter(
        ([key, value]) => (value === 'off' || value === 0) && (!key.startsWith('@typescript-eslint/'))
      )
      .map(([key]) => key)
  );

  const rules = Object.fromEntries(
    Object.entries(
      Object.values(__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED__)
        .reduce((acc, cur) => ({ ...acc, ...cur.rules }), {})
    )
      .filter(([, value]) => {
        if (typeof value === 'string') {
          return value !== 'off';
        }
        if (typeof value === 'number') {
          return value !== 0;
        }
        if (Array.isArray(value)) {
          return value.length !== 0 && value[0] !== 'off';
        }
        return true;
      })
      .reduce((acc, [key, value]) => {
        if (needOverriddenRules.has(key)) {
          // @ts-expect-error -- no type overlap between eslint and typescript-eslint
          acc.push([key, 'off']);
          // @ts-expect-error -- no type overlap between eslint and typescript-eslint
          acc.push([`@typescript-eslint/${key}`, value]);
        }
        return acc;
      }, [])
  );

  fs.writeFileSync(
    path.resolve(__dirname, '../src/modules/generated_overrides.ts'),
    [
      '// This file is generated by scripts/codegen.ts',
      '// DO NOT EDIT THIS FILE MANUALLY',
      'import type { SukkaESLintRuleConfig } from \'@eslint-sukka/shared\';',
      'import ts_eslint_plugin from \'@typescript-eslint/eslint-plugin\';',
      '',
      'export const generated_overrides: SukkaESLintRuleConfig = {',
      '  plugins: {',
      '    \'@typescript-eslint\': ts_eslint_plugin as any',
      '  },',
      `  rules: ${JSON.stringify(rules, null, 2).split('\n').map((line) => `  ${line}`).join('\n').trimStart()}`,
      '};',
      ''
    ].join('\n')
  );
})();
