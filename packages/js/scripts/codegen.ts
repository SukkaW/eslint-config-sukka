// Any deprecated rules of @eslint/js will automatically be removed from the "all"
// But they won't be removed in "recommended" as they are still useful

// @ts-expect-error -- no types
import eslint_js from '@eslint/js';
import fs from 'fs';
import path from 'path';

import stylistic_eslint_plugin_js from '@stylistic/eslint-plugin-js';

(() => {
  const allEslintJsRuleNames = new Set(Object.keys(eslint_js.configs.all.rules));
  const stylisticEslintRuleNames = new Set(Object.keys(stylistic_eslint_plugin_js.rules));

  const rules = (Object.entries(eslint_js.configs.recommended.rules).filter(([ruleName]) => !allEslintJsRuleNames.has(ruleName)) as Array<[string, 'off' | 'error']>).reduce<Record<string, 'off' | 'error'>>((acc, [ruleName, value]) => {
    if (stylisticEslintRuleNames.has(ruleName)) {
      acc[ruleName] = 'off';
      acc[`@stylistic/js/${ruleName}`] = value;
    } else {
      acc[ruleName] = value;
    }
    return acc;
  }, {});

  fs.writeFileSync(
    path.resolve(__dirname, '../src/modules/generated_eslint_js_deprecated.ts'),
    [
      '// This file is generated by scripts/codegen.ts',
      '// DO NOT EDIT THIS FILE MANUALLY',
      'import type { SukkaESLintRuleConfig } from \'@eslint-sukka/shared\';',
      'import stylisticJs from \'@stylistic/eslint-plugin-js\';',
      '',
      'export const generated_eslint_js_deprecated: SukkaESLintRuleConfig = {',
      '  plugins: {',
      '    \'@stylistic/js\': stylisticJs',
      '  },',
      `  rules: ${JSON.stringify(rules, null, 2).split('\n').map((line) => `  ${line}`).join('\n').trimStart()}`,
      '};',
      ''
    ].join('\n')
  );
})();
