import { javascript as eslint_config_sukka_js } from '../src/modules/javascript';

import ts_eslint_plugin from '@typescript-eslint/eslint-plugin';
import stylistic_eslint_plugin_js from '@stylistic/eslint-plugin-js';
import stylistic_eslint_plugin_ts from '@stylistic/eslint-plugin-ts';

import fs from 'node:fs';
import path from 'node:path';

(() => {
  const stylistic_eslint_plugin_ts_rulenames = new Set(Object.keys(stylistic_eslint_plugin_ts.rules));

  const TS_ESLINT_BASE_RULES_TO_BE_OVERRIDDEN = new Map(
    Object.entries(ts_eslint_plugin.rules)
      // https://github.com/sweepline/eslint-plugin-unused-imports/blob/2563edf7d7894e0cc05163d9e9180bc3c56471cc/lib/rules/no-unused-imports.js#L15
      .filter(([, rule]) => rule.meta.docs.extendsBaseRule != null)
      .map(
        ([ruleName, rule]) => [
          typeof rule.meta.docs.extendsBaseRule === 'string'
            ? rule.meta.docs.extendsBaseRule
            : ruleName,
          ruleName
        ] as const
      )
  );

  const STYLISTIC_JS_RULES_TO_BE_OVERRIDEN = new Set(Object.keys(stylistic_eslint_plugin_js.rules)
    .filter((ruleName) => stylistic_eslint_plugin_ts_rulenames.has(ruleName))
    .map(ruleName => `@stylistic/js/${ruleName}`));

  const rules = Object.fromEntries(
    Object.entries(
      eslint_config_sukka_js()
        .reduce((acc, cur) => ({ ...acc, ...cur.rules }), {})
    )
      // .filter(([, value]) => {
      //   if (typeof value === 'string') {
      //     return value !== 'off';
      //   }
      //   if (typeof value === 'number') {
      //     return value !== 0;
      //   }
      //   if (Array.isArray(value)) {
      //     return value.length !== 0 && value[0] !== 'off';
      //   }
      //   return true;
      // })
      .reduce((acc, [baseRuleName, value]) => {
        switch (baseRuleName) {
          case 'camelcase':
          case 'no-restricted-imports': {
          // disable camelcase directly, use custom @typescript-eslint/naming-convention instead
          // disable no-restricted-imports directly, use @typescript-eslint/no-restricted-imports instead

            // @ts-expect-error -- no type overlap between eslint and typescript-eslint
            acc.push([baseRuleName, 'off']);

            break;
          }
          case 'sukka/no-return-await': {
            acc.push(
            // @ts-expect-error -- no type overlap between eslint and typescript-eslint
              [baseRuleName, 'off'],
              ['@typescript-eslint/return-await', 'error']
            );

            break;
          }
          case 'no-loss-of-precision': {
            // do nothing

            // @typescript-eslint/no-loss-of-precision is deprecated
            // The original rule is recommended instead

            break;
          }
          default: if (TS_ESLINT_BASE_RULES_TO_BE_OVERRIDDEN.has(baseRuleName)) {
            const replacementRulename = TS_ESLINT_BASE_RULES_TO_BE_OVERRIDDEN.get(baseRuleName)!;
            acc.push(
            // @ts-expect-error -- no type overlap between eslint and typescript-eslint
              [baseRuleName, 'off'],
              [`@typescript-eslint/${replacementRulename}`, value]
            );
          } else if (
            baseRuleName.startsWith('autofix/')
            && TS_ESLINT_BASE_RULES_TO_BE_OVERRIDDEN.has(baseRuleName.slice(8))) {
            const replacementRulename = TS_ESLINT_BASE_RULES_TO_BE_OVERRIDDEN.get(baseRuleName.slice(8))!;

            acc.push(
              // @ts-expect-error -- no type overlap between eslint and typescript-eslint
              [baseRuleName, 'off'],
              [`autofix/${baseRuleName}`, 'off'],
              [`@typescript-eslint/${replacementRulename}`, value]
            );
          } else if (STYLISTIC_JS_RULES_TO_BE_OVERRIDEN.has(baseRuleName)) {
            acc.push(
            // @ts-expect-error -- no type overlap between eslint and typescript-eslint
              [baseRuleName, 'off'],
              [baseRuleName.replace('@stylistic/js/', '@stylistic/ts/'), value]
            );
          }
        }
        return acc;
      }, [])
  );

  fs.writeFileSync(
    path.resolve(__dirname, '../src/modules/_generated_typescript_overrides.ts'),
    [
      '// This file is generated by scripts/codegen.ts',
      '// DO NOT EDIT THIS FILE MANUALLY',
      'import type { SukkaESLintRuleConfig } from \'@eslint-sukka/shared\';',
      '',
      'export const generated_typescript_overrides: SukkaESLintRuleConfig = {',
      `  rules: ${JSON.stringify(rules, null, 2).split('\n').map((line) => `  ${line}`).join('\n').trimStart()}`,
      '};',
      ''
    ].join('\n')
  );
})();
